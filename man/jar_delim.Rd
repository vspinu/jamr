% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jar.R
\name{jar_delim}
\alias{jar_csv}
\alias{jar_csv2}
\alias{jar_delim}
\alias{jar_tsv}
\title{Serialize csv, tsv and other delimited files.}
\usage{
jar_delim(in_file, out_file = paste0(in_file, ".rjar"), callback = NULL,
  chunk_size = 10000, delim, ...)

jar_csv(in_file, out_file = paste0(in_file, ".rjar"), callback = NULL,
  chunk_size = 10000, ...)

jar_csv2(in_file, out_file = paste0(in_file, ".rjar"), callback = NULL,
  chunk_size = 10000, ...)

jar_tsv(in_file, out_file = paste0(in_file, ".rjar"), callback = NULL,
  chunk_size = 10000, ...)
}
\arguments{
\item{in_file}{Input delimited text file. Can be R connection or an archive
files supported by \code{readr} package.}

\item{out_file}{Output archive file. By default it is \code{in_file} with
\code{.rjar} extension.}

\item{callback}{A function that receives two arguments \code{chunk}, a data
frame,  and \code{row}, row index of the curent chunk in the input
file. This function can return logical \code{FALSE} to indicate that
processing should stop. If not provided, \code{callback} is an identity
function.}

\item{chunk_size}{The number of rows to process in each chunk.}

\item{delim}{Single character used to separate fields within a record}

\item{...}{Other arguments passed directly to \code{read_delim}.}
}
\description{
These functions use \code{read_delim_chunked} functionality from
\code{readr} package to convert large delimited text files into jar binary
without loading it into memory. \cr\cr ‘jar_csv’ and ‘jar_tsv’ are special
cases of the general ‘jar_delim’. ‘jar_csv2’ uses ‘;’ for separators,
instead of ‘,’.
}

